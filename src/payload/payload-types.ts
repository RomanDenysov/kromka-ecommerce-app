/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    stores: Store;
    addresses: Address;
    tags: Tag;
    categories: Category;
    products: Product;
    orders: Order;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    appOptions: AppOption;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  role: 'admin' | 'user' | 'editor' | 'b2b';
  id: string;
  email: string;
  name?: string | null;
  image?: string | null;
  emailVerified?: string | null;
  accounts?:
    | {
        id?: string | null;
        provider: string;
        providerAccountId: string;
        type: string;
      }[]
    | null;
  sessions?:
    | {
        id?: string | null;
        sessionToken: string;
        expires: string;
      }[]
    | null;
  verificationTokens?:
    | {
        id?: string | null;
        token: string;
        expires: string;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stores".
 */
export interface Store {
  id: number;
  name: string;
  openHours?: {
    mondayFriday?: string | null;
    saturday?: string | null;
    sunday?: string | null;
  };
  phone: string;
  email?: string | null;
  address: number | Address;
  isActive?: boolean | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addresses".
 */
export interface Address {
  id: number;
  street: string;
  street2?: string | null;
  city: string;
  zip: string;
  country: string;
  googleMapsUrl?: string | null;
  latitude?: number | null;
  longitude?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  rating?: number | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  name: string;
  slug?: string | null;
  parent?: (number | null) | Category;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: number;
  createdBy: string | User;
  name: string;
  description?: string | null;
  composition?: string | null;
  ingredients?:
    | {
        ingredient: string;
        id?: string | null;
      }[]
    | null;
  price: number;
  category: number | Product;
  tags?: (number | Tag)[] | null;
  status: 'draft' | 'active' | 'sold' | 'coming' | 'archived';
  images: {
    image: number | Media;
    altText?: string | null;
    id?: string | null;
  }[];
  allergens?:
    | {
        allergen: string;
        id?: string | null;
      }[]
    | null;
  customSorting: 'yes' | 'no';
  customSortingOrder?: {
    isFavorite?: boolean | null;
    customSortingRating?: number | null;
  };
  availabilityType: 'always' | 'limited';
  availability?:
    | {
        day: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
        quantity: number;
        id?: string | null;
      }[]
    | null;
  storeInventory?:
    | {
        storeId: number | Store;
        dailyInventory?:
          | {
              date: string;
              quantity: number;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  restockSchedule?: {
    frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
    quantity: number;
    days?:
      | {
          day: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
          id?: string | null;
        }[]
      | null;
  };
  priceId?: string | null;
  stripeId?: string | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: number;
  createdBy?: (string | null) | User;
  status: 'pending' | 'progress' | 'ready' | 'shipped' | 'completed' | 'cancelled';
  paymentMethod: 'cash' | 'card' | 'stripe' | 'other';
  paymentStatus: 'pending' | 'progress' | 'completed' | 'cancelled';
  _isPaid: boolean;
  products?:
    | {
        product: number | Product;
        quantity: number;
        id?: string | null;
      }[]
    | null;
  subtotal?: number | null;
  discount?: number | null;
  totalPrice: number;
  deliveryMethod: 'delivery' | 'pickup' | 'other';
  pickupStore?: (number | null) | Store;
  deliveryAddress?: (number | null) | Address;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "appOptions".
 */
export interface AppOption {
  id: number;
  contactInfo: {
    mainEmail: string;
    mainPhone: string;
    address?: string | null;
  };
  socialMedia?: {
    platforms?:
      | {
          platform?: ('instagram' | 'facebook' | 'substack' | 'twitter' | 'youtube') | null;
          url?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}